version: "3"

services:

  # Redirects requests to the container that has a matching "VIRTUAL_HOST"
  # environment variable (eg. If a reqeust is made to "example.com", the 
  # proxy will redirect to the container that has "VIRTUAL_HOST=example.com").
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: always
    networks:
      - eddysanoli_network
    depends_on:
      - nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro                      # To connect to the Docker daemon and automatically change the internal "nginx.conf" file with the address of the containers with a "VIRTUAL_HOST" environment variable.
      - letsencrypt-vhost:/etc/nginx/vhost.d                          # To change the configuration of virtual hosts. 
      - letsencrypt-html:/usr/share/nginx/html                        # To write challange files (Small validation files found inside of html).   
      - letsencrypt-certs:/etc/nginx/certs:ro                         # To create / renew LetsEncrypt certificates 
      - letsencrypt-confd:/etc/nginx/conf.d                           # To change the configuration of the proxy.
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy # To apply the automatic SSL certificates coming from the companion letsencrypt-nginx-proxy-companion container. 


  # Automatic SSL certificate generation using Let's Encrypt
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    restart: always
    networks:
      - eddysanoli_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro                  # To connect to the Docker daemon and automatically change the internal "nginx.conf" file with the address of the containers with a "VIRTUAL_HOST" environment variable.
      - letsencrypt-vhost:/etc/nginx/vhost.d                          # Mount the same volumes as the nginx-proxy container (equivalent to using "volumes_from") 
      - letsencrypt-html:/usr/share/nginx/html
      - letsencrypt-certs:/etc/nginx/certs:rw
      - letsencrypt-confd:/etc/nginx/conf.d
    

  # Main nginx container managing the "serving" part of the website.
  nginx:
    image: nginx
    container_name: nginx
    restart: always                                                         # Always restart unless stopped manually
    networks:
      - eddysanoli_network
    depends_on:
      - eddysanoli_com                                                      # Make sure its dependencies start before it starts in order to  
    expose:
      - "80"                                                                # The nginx proxy will be the one that exposes port 80. This will only expose it locally to the docker network 
    volumes:
      - /opt/storage/nginx/nginx.conf:/etc/nginx/nginx.conf                 # Mount the nginx.conf file
    environment:
      - VIRTUAL_HOST=eddysanoli.com,www.eddysanoli.com,bot.eddysanoli.com   # The nginx-proxy will redirect "eddysanoli.com" requests to this container 
      - LETSENCRYPT_HOST=eddysanoli.com,www.eddysanoli.com                  # The letsencrypt container will generate SSL certificates for these domains
      - LETSENCRYPT_EMAIL=work@eddysanoli.com                               # The email that gets notified when the certificates are expiring soon.
    

  # Container running the Next.js Portfolio Website 
  eddysanoli_com:
    image: eddysanoli_com:latest
    build: /opt/eddysanoli_repo/website
    container_name: eddysanoli_com
    networks:
      - eddysanoli_network
    ports:
      - "3000:3000"                                                   # Port used by default by Next.js 
    volumes:
      - /opt/eddysanoli_repo/website:/usr/src                         # Mount the website folder to the folder where the container will be running the app
    

  # Discord Automation Bot 
  discord-bot:
    build: /opt/discord_bot 
    image: discord-bot:latest
    container_name: discord-bot
    restart: always
    networks:
      - eddysanoli_network
    depends_on: 
      - postgres
    volumes:
      - /opt/discord_bot/:/usr/src                                    # Mount the current directory to workdir of the container
      - /usr/src/node_modules                                         # Prevent the containers "node_modules" from being deleted when no "node_modules" folder exists in the server 
  
  # Postgres Database for the Bot and the Website
  # You can add as many volumes for as many .sql files that you want to 
  # run on the database on startup.
  postgres:
    image: postgres:14.5
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - /opt/discord_bot/database/init_bot.sql:/docker-entrypoint-initdb.d/init_bot.sql
    networks:
      - eddysanoli_network 
  

  # Logs datasource for Grafana 
  loki:
    image: grafana/loki:2.6.1
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - eddysanoli_network


  # Scrapes local log files and sends them to loki
  promtail:
    image: grafana/promtail:2.6.1
    container_name: promtail
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - eddysanoli_network


  # Dashboard for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "0"                                             # Run as root 
    ports:
      - "3200:3000"
    networks:
      - eddysanoli_network
    environment:
      - "GF_SECURITY_ADMIN_USER=${GRAFANA_USER}"          # Username for logging into Grafana
      - "GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}"      # Password for logging into Grafana
  
# Global networks
networks:
  eddysanoli_network:
    driver: bridge

# Global volumes shared by all containers
volumes:
  letsencrypt-vhost:
  letsencrypt-html:
  letsencrypt-certs:
  letsencrypt-confd: